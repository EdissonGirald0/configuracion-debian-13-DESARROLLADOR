# 🚀 DWM-Qtile Sistema de Desarrollo Integrado

### 🐳 DevOps & Containers
[![Docker](https://img.shields.io/badge/Docker-20.10+-2496ED?logo=docker&logoColor=white)](https://www.docker.com/)
[![Docker```
dwm-qtile-system/
├── 📖 README.md                           # Este archivo - Entrada principal
├── 🏗️ ARQUITECTURA.md                    # Documentación de la arquitectura
│
├── 📚 docs/                              # Documentación completa
│   ├── SISTEMA_INTEGRADO.md              # Guía principal (⭐ PRINCIPAL)
│   ├── QUICKSTART.md                     # Instalación rápida
│   ├── INDEX.md                          # Navegación completa
│   └── ... (más documentación)
│
├── 🔧 scripts/                           # Scripts del sistema
│   ├── master-dev.sh                     # Script coordinador principal
│   ├── core/                            # Scripts principales integrados
│   └── legacy/                          # Scripts originales (archivados)
│
├── ⚙️ config/                            # Configuraciones del sistema
└── 🎨 assets/                            # Recursos (imágenes, etc.)
```mg.shields.io/badge/Docker_Compose-2.20+-2496ED?logo=docker&logoColor=white)](https://docs.docker.com/compose/)
[![VS Code](https://img.shields.io/badge/VS_Code-Remote_Containers-007ACC?logo=visualstudiocode&logoColor=white)](https://code.visualstudio.com/)

### 🛠️ Herramientas de Desarrollo
[![Git](https://img.shields.io/badge/Git-2.40+-F05032?logo=git&logoColor=white)](https://git-scm.com/)
[![Vim](https://img.shields.io/badge/Vim-Neovim-019733?logo=vim&logoColor=white)](https://neovim.io/)
[![Zsh](https://img.shields.io/badge/Zsh-Oh_My_Zsh-1A2C34?logo=gnubash&logoColor=white)](https://ohmyz.sh/)
[![Tmux](https://img.shields.io/badge/Tmux-3.3+-1BB91F?logo=tmux&logoColor=white)](https://github.com/tmux/tmux)

### �️ Sistema & WM
[![Debian](https://img.shields.io/badge/Debian-13_Trixie-A81D33?logo=debian&logoColor=white)](https://www.debian.org/)
[![DWM](https://img.shields.io/badge/DWM-Suckless-1793D1?logo=linux&logoColor=white)](https://dwm.suckless.org/)
[![Qtile](https://img.shields.io/badge/Qtile-Python_WM-306998?logo=python&logoColor=white)](http://www.qtile.org/)
[![Alacritty](https://img.shields.io/badge/Alacritty-Terminal-F46800?logo=alacritty&logoColor=white)](https://alacritty.org/)

### 📋 Stacks Disponibles
- **Python**: Django, Flask, FastAPI + PostgreSQL/MongoDB/Redis
- **Node.js**: React, Next.js, Vue.js + herramientas modernas  
- **Java**: Spring Boot + Maven/Gradle + OpenJDK 17+
- **Go**: Gin, Echo, Fiber + toolchain completo
- **Bases de datos**: PostgreSQL, MongoDB, Redis con interfaces web
- **DevOps**: Docker, Docker Compose, VS Code Remote Containers
- **Herramientas**: Git, Vim/Neovim, Zsh + Oh My Zsh, Tmux
- **Sistema**: DWM + Qtile, Alacritty, configuraciones optimizadas📋 Descripción

**Sistema de desarrollo completamente integrado** que combina DWM/Qtile con un entorno de desarrollo containerizado profesional para **Debian Trixie**. Este proyecto ha evolucionado de una configuración básica a un **sistema completo de desarrollo** con scripts coordinados.

### ✨ Sistema Integrado v2.0

Todos los scripts han sido mejorados para trabajar de manera coordinada, proporcionando:

- **🔧 Configuración unificada** con archivos centralizados (`~/.dev_config`)
- **📊 Sistema de logging integrado** para monitoreo completo (`~/.dev_logger`)
- **🐳 Contenedores optimizados** para desarrollo multi-lenguaje
- **⚙️ Gestión automática** de servicios y dependencias
- **🛠️ Herramientas avanzadas** con funciones inteligentes
- **🎮 Script maestro coordinador** (`master-dev.sh`)

## 🎯 Características Principales

### 🐍 Python Stack
[![Debian](https://img.shields.io/badge/Debian-Trixie-A81D33?logo=debian&logoColor=white)](https://www.debian.org/)
[![DWM](https://img.shields.io/badge/DWM-6.4-1793D1?logo=linux&logoColor=white)](https://dwm.suckless.org/)
[![Python](https://img.shields.io/badge/Python-3.11+-3776AB?logo=python&logoColor=white)](https://www.python.org/)
[![Django](https://img.shields.io/badge/Django-4.2-092E20?logo=django&logoColor=white)](https://www.djangoproject.com/)
[![Flask](https://img.shields.io/badge/Flask-2.3-000000?logo=flask&logoColor=white)](https://flask.palletsprojects.com/)
[![FastAPI](https://img.shields.io/badge/FastAPI-0.110-009688?logo=fastapi&logoColor=white)](https://fastapi.tiangolo.com/)
[![PostgreSQL](https://img.shields.io/badge/PostgreSQL-15-4169E1?logo=postgresql&logoColor=white)](https://www.postgresql.org/)
[![MongoDB](https://img.shields.io/badge/MongoDB-6.0-47A248?logo=mongodb&logoColor=white)](https://www.mongodb.com/)
[![Redis](https://img.shields.io/badge/Redis-7.0-DC382D?logo=redis&logoColor=white)](https://redis.io/)

### 🟩 Node.js Stack
[![Node.js](https://img.shields.io/badge/Node.js-18+-339933?logo=node.js&logoColor=white)](https://nodejs.org/)
[![React](https://img.shields.io/badge/React-18-61DAFB?logo=react&logoColor=white)](https://react.dev/)
[![Next.js](https://img.shields.io/badge/Next.js-13-000000?logo=next.js&logoColor=white)](https://nextjs.org/)
[![Vue.js](https://img.shields.io/badge/Vue.js-3-4FC08D?logo=vue.js&logoColor=white)](https://vuejs.org/)

### ☕ Java Stack
[![Java](https://img.shields.io/badge/Java-17+-007396?logo=java&logoColor=white)](https://www.java.com/)
[![Spring Boot](https://img.shields.io/badge/Spring_Boot-3.1-6DB33F?logo=springboot&logoColor=white)](https://spring.io/projects/spring-boot)
[![Maven](https://img.shields.io/badge/Maven-3.9-C71A36?logo=apachemaven&logoColor=white)](https://maven.apache.org/)
[![Gradle](https://img.shields.io/badge/Gradle-8.2-02303A?logo=gradle&logoColor=white)](https://gradle.org/)

### 🦦 Go Stack
[![Go](https://img.shields.io/badge/Go-1.21+-00ADD8?logo=go&logoColor=white)](https://go.dev/)
[![Gin](https://img.shields.io/badge/Gin-1.9-00B386?logo=go&logoColor=white)](https://gin-gonic.com/)
[![Echo](https://img.shields.io/badge/Echo-4.9-132D46?logo=go&logoColor=white)](https://echo.labstack.com/)
[![Fiber](https://img.shields.io/badge/Fiber-2.49-2C8EBB?logo=go&logoColor=white)](https://gofiber.io/)

### � DevOps & Containers
[![Docker](https://img.shields.io/badge/Docker-20.10+-2496ED?logo=docker&logoColor=white)](https://www.docker.com/)
[![Docker Compose](https://img.shields.io/badge/Docker_Compose-2.20+-2496ED?logo=docker&logoColor=white)](https://docs.docker.com/compose/)
[![VS Code](https://img.shields.io/badge/VS_Code-Remote_Containers-007ACC?logo=visualstudiocode&logoColor=white)](https://code.visualstudio.com/)

### 🛠️ Herramientas de Desarrollo
[![Git](https://img.shields.io/badge/Git-2.40+-F05032?logo=git&logoColor=white)](https://git-scm.com/)
[![Vim](https://img.shields.io/badge/Vim-Neovim-019733?logo=vim&logoColor=white)](https://neovim.io/)
[![Zsh](https://img.shields.io/badge/Zsh-Oh_My_Zsh-1A2C34?logo=gnubash&logoColor=white)](https://ohmyz.sh/)
[![Tmux](https://img.shields.io/badge/Tmux-3.3+-1BB91F?logo=tmux&logoColor=white)](https://github.com/tmux/tmux)

### 🖥️ Sistema & WM
[![Debian](https://img.shields.io/badge/Debian-13_Trixie-A81D33?logo=debian&logoColor=white)](https://www.debian.org/)
[![DWM](https://img.shields.io/badge/DWM-Suckless-1793D1?logo=linux&logoColor=white)](https://dwm.suckless.org/)
[![Qtile](https://img.shields.io/badge/Qtile-Python_WM-306998?logo=python&logoColor=white)](http://www.qtile.org/)
[![Alacritty](https://img.shields.io/badge/Alacritty-Terminal-F46800?logo=alacritty&logoColor=white)](https://alacritty.org/)

### �📋 Stacks Disponibles
- **Python**: Django, Flask, FastAPI + PostgreSQL/MongoDB/Redis
- **Node.js**: React, Next.js, Vue.js + herramientas modernas
- **Java**: Spring Boot + Maven/Gradle + OpenJDK 17+
- **Go**: Gin, Echo, Fiber + toolchain completo
- **Bases de datos**: Stack completo con interfaces web

### 🛠️ Herramientas Avanzadas
- **Creación inteligente** de proyectos con templates predefinidos
- **VS Code Remote Containers** pre-configurado para desarrollo aislado
- **Funciones de shell** personalizadas (`newpy`, `newnode`, `opencode`)
- **Gestión automática** de contenedores (`devup`, `devdown`, `devstatus`)
- **Terminal optimizado** con Alacritty + Tmux + Zsh
- **Editor avanzado** con Vim/Neovim configurado
- **Control de versiones** con Git integrado
- **Multiplexor de terminal** con sesiones persistentes
- **Gestión de dotfiles** centralizada
- **Scripts automatizados** para tareas repetitivas

## 📚 Documentación del Sistema

| Documento | Propósito | Nivel | Recomendado |
|-----------|-----------|-------|-------------|
| **[`docs/SISTEMA_INTEGRADO.md`](./docs/SISTEMA_INTEGRADO.md)** | **📖 Guía principal del sistema integrado** | **Principal** | **⭐ START HERE** |
| [`ARQUITECTURA.md`](./ARQUITECTURA.md) | **🏗️ Arquitectura y estructura del proyecto** | **Técnico** | **Para desarrolladores** |
| [`docs/QUICKSTART.md`](./docs/QUICKSTART.md) | Instalación rápida en 5 minutos | Básico | Para empezar |

### 🚀 Instalación Rápida
```bash
git clone <este-repo>
cd dwm-qtile-system
./scripts/master-dev.sh install all
```

### 🔍 Verificación del Sistema
```bash
# Verificar instalación completa
./scripts/master-dev.sh check

# Ver estado completo
./scripts/master-dev.sh status

# Reparar problemas automáticamente
./scripts/master-dev.sh repair
```

### 📊 Diagrama de Verificación del Sistema
```mermaid
flowchart TD
    A[🔍 Verificar instalación] --> B[master-dev.sh check]
    B --> C{¿Sistema OK?}
    C -->|✅ Sí| D[✅ Ver estado completo]
    C -->|❌ No| E[🔧 Reparar problemas]
    D --> F[master-dev.sh status]
    E --> G[master-dev.sh repair]
    F --> H[📊 Sistema verificado]
    G --> I[🔄 Verificar de nuevo]
    I --> A
```

### 🏗️ Arquitectura del Sistema

```mermaid
graph TB
    subgraph "🖥️ Sistema Base"
        A[Debian Trixie] --> B[DWM/Qtile WM]
        B --> C[Alacritty Terminal]
        C --> D[Zsh + Oh My Zsh]
    end
    
    subgraph "🐳 Contenedores Docker"
        E[Python Container]
        F[Node.js Container]
        G[Java Container]
        H[Go Container]
        I[PostgreSQL Container]
        J[MongoDB Container]
        K[Redis Container]
    end
    
    subgraph "🛠️ Herramientas"
        L[VS Code Remote]
        M[Git + Dotfiles]
        N[Tmux Sessions]
        O[Vim/Neovim]
    end
    
    subgraph "⚙️ Scripts Sistema"
        P[master-dev.sh]
        Q[dev-manager.sh]
        R[setup-containers.sh]
        S[config-tools.sh]
    end
    
    D --> L
    P --> E
    P --> F
    P --> G
    P --> H
    Q --> I
    Q --> J
    Q --> K
    L --> E
    L --> F
    M --> N
    N --> O
```

El proyecto está organizado con una **arquitectura limpia y profesional**:

```
dwm-qtile-system/
├── 📖 README.md                           # Este archivo - Entrada principal
├── 🏗️ ARQUITECTURA.md                    # Documentación de la arquitectura
│
├── � docs/                              # Documentación completa
│   ├── SISTEMA_INTEGRADO.md              # Guía principal (⭐ PRINCIPAL)
│   ├── QUICKSTART.md                     # Instalación rápida
│   ├── INDEX.md                          # Navegación completa
│   └── ... (más documentación)
│
├── 🔧 scripts/                           # Scripts del sistema
│   ├── master-dev.sh                     # Script coordinador principal
│   ├── core/                            # Scripts principales integrados
│   └── legacy/                          # Scripts originales (archivados)
│
├── ⚙️ config/                            # Configuraciones del sistema
└── 🎨 assets/                            # Recursos (imágenes, etc.)
```

**📚 Para detalles completos**: [`ARQUITECTURA.md`](./ARQUITECTURA.md)

## 🚀 Scripts del Sistema Integrado

### Scripts Principales (Nueva Arquitectura Organizada)

| Script | Función | Integración |
|--------|---------|-------------|
| `scripts/core/01-install-developer.sh` | Instalación completa del sistema | ✅ Integrado |
| `scripts/core/03-config-dev-tools.sh` | Configuración de herramientas | ✅ Integrado |
| `scripts/core/dev-manager.sh` | Gestión de contenedores | ✅ Integrado |
| `scripts/core/setup-dev-containers.sh` | Setup de contenedores | ✅ Integrado |
| `scripts/master-dev.sh` | **Script coordinador principal** | ⭐ **MAESTRO** |

#### Scripts Legacy (Archivados)
```bash
scripts/legacy/01-install-full.sh          # Script original completo  
scripts/legacy/02-install-interactiva.sh   # Script original interactivo
```
*Estos scripts están archivados para referencia histórica*

#### Funciones del Sistema
```bash
dev-check                    # Verificación del sistema
dev-init                     # Inicialización de proyectos  
dev-setup-complete          # Verificación post-instalación
tools-check                 # Verificación de herramientas
update-dev-tools-integrated # Actualización coordinada
```

### Funciones de Shell Avanzadas (Auto-instaladas)
```bash
newpy myproject [tipo]       # Crear proyecto Python inteligente
newnode myapp [framework]    # Crear proyecto Node.js con template
opencode [proyecto] [lang]   # Abrir VS Code con configuración
devup [servicio]            # Iniciar contenedores
devdown [servicio]          # Parar contenedores  
devstatus                   # Estado de contenedores
devclean                    # Limpiar sistema
```

### 🔧 Herramientas CLI Adicionales
```bash
# Navegación y archivos
exa                         # Listado de archivos mejorado
bat                         # Cat con sintaxis highlighting
fd                          # Find alternativo más rápido
ripgrep (rg)               # Grep ultrarrápido
fzf                        # Fuzzy finder interactivo

# Monitoreo sistema
htop                       # Monitor de procesos
iotop                      # Monitor I/O
nethogs                    # Monitor red por proceso
ncdu                       # Analizador de disco

# Git y desarrollo
lazygit                    # Git TUI
tig                        # Git browser
gh                         # GitHub CLI
docker-compose            # Orquestación contenedores

# Utilidades
jq                         # Procesador JSON
yq                         # Procesador YAML
curl                       # Cliente HTTP
wget                       # Descarga archivos
tree                       # Visualizar estructura directorios
```

### ✅ Características del Sistema Integrado

#### ✅ Sistema Base Integrado
- **Debian Trixie** optimizado para desarrollo

#### ✅ Entornos Listos para Usar  
- **Python 3.11+** con virtual environments y bases de datos
- **Node.js 18+** con npm, yarn, y frameworks modernos
- **Java 17+** con Maven, Gradle y Spring Boot
- **Go 1.21+** con módulos y frameworks web
- **Bases de datos** PostgreSQL, MongoDB, Redis con GUIs web

#### ✅ Workflow Profesional
- **Creación automática** de proyectos con templates predefinidos
- **VS Code Remote Containers** para desarrollo aislado
- **Git workflows** con configuraciones optimizadas
- **Dotfiles management** centralizado y versionado
- **Session management** con Tmux persistente

#### ✅ Herramientas Integradas
- **Terminal**: Alacritty con aceleración GPU
- **Shell**: Zsh + Oh My Zsh + plugins esenciales
- **Editor**: Vim/Neovim con configuración avanzada
- **Multiplexor**: Tmux con sesiones predefinidas
- **Window Manager**: DWM + Qtile para máxima productividad
- **Fonts**: Nerd Fonts para iconos y símbolos

#### ✅ Mantenimiento Automático
- **Verificación continua** del sistema
- **Reparación automática** de problemas
- **Actualizaciones coordinadas** de herramientas  
- **Backups automatizados** de proyectos y configuraciones

## 🎯 Casos de Uso

### 🔄 Diagrama de Flujos de Desarrollo
```mermaid
flowchart TD
    A[👨‍💻 Desarrollador Full-Stack] -->|Crea API| B[🐍 newpy myapi api]
    A -->|Crea Frontend| C[🟩 newnode frontend react]
    A -->|Inicia servicios| D[🚀 master-dev.sh start all]
    A -->|Abre proyecto| E[💻 opencode myapi python]
    
    B --> F[🐳 Contenedor Python]
    C --> G[🐳 Contenedor Node.js]
    D --> H[🐳 Docker Services]
    E --> I[📝 VS Code Remote]
    
    J[🏢 Equipo de Desarrollo] -->|Setup BD| K[💾 master-dev setup databases]
    J -->|Inicia BD| L[▶️ master-dev start databases]
    J -->|Monitorea BD| M[📊 master-dev logs databases]
    
    K --> N[🗄️ Contenedor PostgreSQL]
    K --> O[🗄️ Contenedor MongoDB]
    K --> P[🗄️ Contenedor Redis]
    L --> N
    L --> O
    L --> P
    M --> Q[📋 Logs Centralizados]
    
    R[🎓 Estudiante/Aprendizaje] -->|Setup Python| S[🐍 master-dev setup python]
    R -->|Crea CLI| T[⚡ newpy proyecto cli]
    R -->|Abre proyecto| U[💻 opencode proyecto]
    
    S --> V[🐳 Contenedor Python Básico]
    T --> V
    U --> W[📝 VS Code + Python]
```

### 👨‍💻 Desarrollador Full-Stack
```bash
./scripts/master-dev.sh install all          # Instalar todo
newpy myapi api                      # Crear API Python
newnode myfrontend react             # Crear frontend React
./scripts/master-dev.sh start all                 # Iniciar servicios
opencode myapi python                # Abrir en VS Code
```

### 🏢 Equipo de Desarrollo
```bash
master-dev setup databases           # Solo bases de datos
master-dev start databases           # Iniciar BD compartidas
master-dev logs databases            # Monitorear BD
```

### 🎓 Estudiante/Aprendizaje
```bash
master-dev setup python             # Solo Python
newpy miprimerprojecto cli           # Proyecto CLI simple
opencode miprimerprojecto            # Abrir y aprender
```

## 📊 Monitoreo y Gestión

### Estado del Sistema
```bash
./scripts/master-dev.sh status                    # Estado completo con recursos
./scripts/master-dev.sh check                     # Verificación de salud
./scripts/master-dev.sh logs system               # Logs centralizados
```

### Mantenimiento  
```bash
./scripts/master-dev.sh clean                     # Limpiar cache y contenedores
./scripts/master-dev.sh backup                    # Backup completo
./scripts/master-dev.sh update                    # Actualizar todo
./scripts/master-dev.sh repair                    # Reparar problemas
```

### 🔄 Diagrama de Mantenimiento del Sistema
```mermaid
flowchart TD
    A[🧹 Limpiar sistema] --> B[master-dev.sh clean]
    B --> C[🗑️ Cache eliminado]
    C --> D[💾 Backup completo]
    D --> E[master-dev.sh backup]
    E --> F[📦 Backup creado]
    F --> G[🔄 Actualizar todo]
    G --> H[master-dev.sh update]
    H --> I[📈 Sistema actualizado]
    I --> J[🔧 Reparar problemas]
    J --> K[master-dev.sh repair]
    K --> L{¿Problemas encontrados?}
    L -->|❌ No| M[✅ Sistema mantenido]
    L -->|⚠️ Sí| N[🔄 Reparaciones aplicadas]
    N --> O[✅ Sistema restaurado]
```

## 🆘 Soporte y Ayuda

### 📖 Documentación Completa
- **Lee [`SISTEMA_INTEGRADO.md`](./SISTEMA_INTEGRADO.md)** para documentación completa
- **Consulta [`TROUBLESHOOTING.md`](./TROUBLESHOOTING.md)** para problemas específicos

### 🔧 Auto-Diagnóstico
```bash
master-dev repair                    # Reparación automática  
master-dev logs system               # Ver logs detallados
```

---
- Configuración centralizada y logging unificado  
- Herramientas avanzadas con templates inteligentes
- Monitoreo y verificación automatizados
- Workflows profesionales para desarrollo

---
![Image](./assets/imagenes/00-trixie.png)

**🚀 ¡Listo para desarrollo profesional con DWM-Qtile integrado!**



---


**GNU General Public License v3.0**

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.



